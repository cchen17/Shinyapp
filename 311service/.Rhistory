#d
mpg%>%
group_by(manufacturer)%>%
summarise(max(cty))
#d
subdf=mpg%>%
group_by(manufacturer)%>%
summarise(max(cty))
inner_join(mpg,subdf,by=c("manufacturer","cty"))
#d
subdf=mpg%>%
group_by(manufacturer)%>%
summarise(max(cty))
subdf
#d
subdf=mpg%>%
group_by(manufacturer)%>%
summarise(cty=max(cty))
subdf
inner_join(mpg,subdf,by=c("manufacturer","cty"))
library(googleVis)
install.packages(googleVis)
install.packages("googleVis")
library(googleVis)
demo(googleVis)
head(mtcars, n = 10)
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter)
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$mpg <- NULL
head(dt)
head(mtcars, n = 10)
scatter <- gvisScatterChart(dt)
plot(scatter)
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options))
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options)")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options)")
plot(gvisScatterChart(dt,options=my_options))
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options))
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options)")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options)")
plot(gvisScatterChart(dt,options=my_options))
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options))
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_4.html.tooltip <- rownames(dt)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_6.html.tooltip <- rownames(dt)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$cyl_8.html.tooltip <- rownames(dt)
dt$mpg <- NULL
head(dt)
plot(gvisScatterChart(dt,options=my_options))
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
library(leaflet)
leaflet() %>% addTiles() %>% # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
library(map)
library(maps)
install.packages("maps")
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
colStates
map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet
leaflet
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet
leaflet_andrew
shiny::runApp('C:/nydsa bootcamp slides/R/Shiny/2/leafletDemo/LeafletDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/leafletDemo/LeafletDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/leafletDemo/LeafletDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/leafletDemo/leafletDemo2')
#a
library(ggplot2)
data(mpg)
#a
library(ggplot2)
data(mpg)
mpg%>%
mutate(hty_displ_ratio=hwy/displ)
#b
mpg%>%
select(V1=year,V2=cyl,V3=cty,V4=hwy)
#a
library(ggplot2)
mpg%>%
mutate(hty_displ_ratio=hwy/displ)
#b
mpg%>%
select(V1=year,V2=cyl,V3=cty,V4=hwy)
#a
library(ggplot2)
data(mpg)
mpg%>%
mutate(hty_displ_ratio=hwy/displ)
#a
library(ggplot2)
data(mpg)
#b
mpg%>%
select(V1=year,V2=cyl,V3=cty,V4=hwy)
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
install.packages("shinydashboard")
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
devtools::install_github('rstudio/DT')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
library(dplyr)
library(ggplot2)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#1
temp_mean=mean(temp$Body.Temp)
rate_mean=mean(temp$Heart.Rate)
df1.1<-temp%>%
group_by(Gender)%>%
summarise(BT_gender=mean(Body.Temp),HR_gender=mean(Heart.Rate))
#2
ggplot(temp,aes(x=Heart.Rate,y=Body.Temp,col=Gender))+geom_point()
#3
t.test(temp$Body.Temp,mu=98.6,alternative = "less")
#p-value = 1.205e-07, p value is smaller than 5%.
#The null Hypothesis not true.
#Therefore the alternative Hypothesis is supported that the body temp is lower than 98.6
#4
male<-temp%>%
filter(Gender=="Male")
female<-temp%>%
filter(Gender=="Female")
t.test(male$Body.Temp,female$Body.Temp,alternative="two.sided")
#p-value = 0.02394, it is less than 5%.
#Therefore we will take the result in favor of the alternative that the ave temp of male and female is different at 95% confidence level.
#5
var.test(male$Heart.Rate,female$Heart.Rate,alternative="two.sided")
#p-value = 0.011, which is less than 0.05
#Thus it rejects the null hypothesis at 95% confidence level
#We go with alternative that the variances of male heart rate and female heart rate are different.
t.test(female$Heart.Rate,mu=73.4,alternative = 'less')
#male heart rate average is 73.4
#the p value is 0.772, which is larger than 0.05
#Thus we don't have evidence against the null hypothesis at 95% confidence level
#The female average heart rate is the same as the male ave heart rate
summary(temp)
t.test(temp$Body.Temp,mu=98.6,alternative = "less")
#5
var.test(male$Heart.Rate,female$Heart.Rate,alternative="two.sided")
bartlett.test(list(ctrl,trt1,trt2)
)
bartlett.test(list(ctrl,trt1,trt2))
df2.1<-PlantGrowth
ggplot(data=df2.1,aes(x=group,y=weight))+geom_boxplot()
#the average weitgh of trt1 is lower than the control group, when the average weight of trt2 is higher than the control group
#For trt1, most of the samples are between 3.59-.4.89 weight, however, 2 samples get very high weight compare to others in the same group
#2
ctrl<-(df2.1%>%filter(group=="ctrl")%>%select(weight))$weight
trt1<-(df2.1%>%filter(group=="trt1")%>%select(weight))$weight
trt2<-(df2.1%>%filter(group=="trt2")%>%select(weight))$weight
sd_ctrl=sd(ctrl)
sd_trt1=sd(trt1)
sd_trt2=sd(trt2)
bartlett.test(list(ctrl,trt1,trt2))
library(dplyr)
library(stringr)
library(lubridate)
setwd("C:/nydsa bootcamp slides/Projects/2/Shinyapp/data process")
service_data <- read.csv(file = "./2018_halfyear.csv")
aaa<-service_data%>%group_by(Complaint.Type)%>%
summarise(n=n())%>%
arrange(desc(n))
#aaa[grep("UNSANITARY*",aaa$Complaint.Type),]
sum(head(aaa,10)$n)
head(aaa,10)
service_data<-service_data%>%
mutate(Complaint.Type=gsub('Noise - Residential','Noise',Complaint.Type,fixed=TRUE))%>%
#  mutate(Complaint.Type=gsub('Noise - Street/Sidewalk','Noise',Complaint.Type,fixed=TRUE))%>%
#  mutate(Complaint.Type=gsub('Noise - Commercial','Noise',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('HEAT/HOT WATER','Water System',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('Blocked Driveway','Illegal Parking',Complaint.Type,fixed=TRUE))
aaa<-service_data%>%group_by(Complaint.Type)%>%
summarise(n=n())%>%
arrange(desc(n))
#aaa[grep("UNSANITARY*",aaa$Complaint.Type),]
sum(head(aaa,10)$n)
#aaa[grep("UNSANITARY*",aaa$Complaint.Type),]
sum(head(aaa,5)$n)
aaa<-head(aaa,10)
final_df<-semi_join(service_data,aaa,by="Complaint.Type")
bbb<-head(final_df,172462)
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[10000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[10000]]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[,10000]]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][10000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][100000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][150000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][155000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][156000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][158000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157800]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157200]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157000]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157100]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157110]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157120]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157140]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157130]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157135]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157138]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157137]
#final_df$Created.Date<-as.Date(final_df$Created.Date,format="%m/%d/%Y")
final_df[[1]][157136]
bbb<-head(final_df,157136)
write.csv(bbb,"data_v3.csv")
bbb%>%filter(is.na(Longitude))
bbb%>%filter(!is.na(Longitude))
bbb<-bbb%>%filter(!is.na(Longitude))
write.csv(bbb,"data_v3.csv")
shiny::runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
library(dplyr)
library(stringr)
library(lubridate)
setwd("C:/nydsa bootcamp slides/Projects/2/Shinyapp/data process")
service_data <- read.csv(file = "./2018_halfyear.csv")
service_data<-service_data%>%
mutate(Complaint.Type=gsub('Noise - Residential','Noise',Complaint.Type,fixed=TRUE))%>%
#  mutate(Complaint.Type=gsub('Noise - Street/Sidewalk','Noise',Complaint.Type,fixed=TRUE))%>%
#  mutate(Complaint.Type=gsub('Noise - Commercial','Noise',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('HEAT/HOT WATER','Water System',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('Blocked Driveway','Illegal Parking',Complaint.Type,fixed=TRUE))
# mutate(Complaint.Type=gsub('WATER LEAK','Water System',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('Street Light Condition','Street Condition',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('Noise - Vehicle','Noise',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('Derelict Vehicles','Derelict Vehicle',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('PAINT/PLASTER','Graffiti',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('PLUMBING','Plumbing',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('UNSANITARY CONDITION','Unsanitary Condition',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('DOOR/WINDOW','Door/Window',Complaint.Type,fixed=TRUE))
aaa<-service_data%>%group_by(Complaint.Type)%>%
summarise(n=n())%>%
arrange(desc(n))
#aaa[grep("UNSANITARY*",aaa$Complaint.Type),]
sum(head(aaa,5)$n)
#aaa[grep("UNSANITARY*",aaa$Complaint.Type),]
sum(head(aaa,10)$n)
head(aaa,5)
head(aaa,10)
library(dplyr)
library(stringr)
library(lubridate)
setwd("C:/nydsa bootcamp slides/Projects/2/Shinyapp/data process")
service_data <- read.csv(file = "./2018_halfyear.csv")
service_data<-service_data%>%
mutate(Complaint.Type=gsub('Noise - Residential','Noise',Complaint.Type,fixed=TRUE))%>%
#  mutate(Complaint.Type=gsub('Noise - Street/Sidewalk','Noise',Complaint.Type,fixed=TRUE))%>%
#  mutate(Complaint.Type=gsub('Noise - Commercial','Noise',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('HEAT/HOT WATER','Water System',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('Blocked Driveway','Illegal Parking',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('WATER LEAK','Water System',Complaint.Type,fixed=TRUE))%>%
mutate(Complaint.Type=gsub('Street Light Condition','Street Condition',Complaint.Type,fixed=TRUE))
# mutate(Complaint.Type=gsub('Noise - Vehicle','Noise',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('Derelict Vehicles','Derelict Vehicle',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('PAINT/PLASTER','Graffiti',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('PLUMBING','Plumbing',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('UNSANITARY CONDITION','Unsanitary Condition',Complaint.Type,fixed=TRUE))%>%
# mutate(Complaint.Type=gsub('DOOR/WINDOW','Door/Window',Complaint.Type,fixed=TRUE))
aaa<-service_data%>%group_by(Complaint.Type)%>%
summarise(n=n())%>%
arrange(desc(n))
#aaa[grep("UNSANITARY*",aaa$Complaint.Type),]
sum(head(aaa,5)$n)
head(aaa,10)
aaa<-head(aaa,5)
aaa
final_df<-semi_join(service_data,aaa,by="Complaint.Type")
final_df[[1]][10000]
final_df[[1]][100000]
final_df[[1]][140000]
final_df[[1]][138000]
final_df[[1]][137000]
final_df[[1]][136000]
final_df[[1]][135000]
final_df[[1]][135500]
final_df[[1]][135600]
final_df[[1]][135700]
final_df[[1]][135800]
final_df[[1]][135900]
final_df[[1]][135950]
final_df[[1]][135940]
final_df[[1]][135930]
final_df[[1]][135935]
final_df[[1]][135933]
final_df[[1]][135932]
bbb<-head(final_df,135932)
bbb<-bbb%>%filter(!is.na(Longitude))
nrow(bbb)
write.csv(bbb,"data_v3.csv")
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/DashboardDemo')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/shinyApps/shinyDashBoard')
map_data%>%group_by(Borough)%>%summarise(n(Borough))
service_data[service_data$Borough==input$selected,]%>%
filter(Created.Date==input$date)%>%group_by(Borough)%>%summarise(n(Borough))
service_data[service_data$Borough=="QUEENS",]%>%
filter(Created.Date=="2017-05-05")%>%group_by(Borough)%>%summarise(n(Borough))
service_data[service_data$Borough=="QUEENS",]%>%
filter(Created.Date=="2017-05-05")%>%group_by(Borough)%>%summarise(n=n())
service_data[service_data$Borough=="QUEENS",]%>%
filter(Created.Date=="2017-05-05")%>%group_by(Complaint.Type)%>%n()
service_data[service_data$Borough=="QUEENS",]%>%
filter(Created.Date=="2017-05-05")%>%group_by(Complaint.Type)%>%summarized(n())
service_data[service_data$Borough=="QUEENS",]%>%
filter(Created.Date=="2017-05-05")%>%group_by(Complaint.Type)%>%summarized(sum(Borough))
service_data[service_data$Borough=="QUEENS"]%>%
filter(Created.Date=="2017-05-05")%>%group_by(Complaint.Type)%>%summarized(sum(Borough))
service_data[service_data$Borough=="QUEENS"]
service_data[service_data$Borough=="QUEENS",]
service_data[service_data$Borough=="QUEENS",]%>%n()
service_data[service_data$Borough=="QUEENS",]%>%nrow()
service_data[service_data$Borough=="BROOKLYN",]%>%nrow()
service_data[service_data$Borough=="QUEENS",]%>%group_by(Complaint.Type)%>%nrow()
service_data[service_data$Borough=="QUEENS",]%>%group_by(Complaint.Type)%>%summarize(nrow())
service_data[service_data$Borough=="QUEENS",]%>%group_by(Complaint.Type)%>%summarize(n=count())
service_data[service_data$Borough=="QUEENS",]%>%group_by(Complaint.Type)%>%summarize(n=count(Borough))
service_data[service_data$Borough=="QUEENS",]%>%group_by(Complaint.Type)%>%summarize(count=n())
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
service_data[service_data$Borough=="BROOKLYN",]%>%
filter(Created.Date=="2018-01-01")%>%
group_by(Complaint.Type,Open.Data.Channel.Type)%>%
summarize(count=n()
)
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
?box
?box()
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
head(service_data)
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
?dateRangeInput
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
?dateInput
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
service_data$Created.Date[[1]]
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/shinyApps/shinyDashBoard')
?formatStyle
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/R/Shiny/2/shinyApps/shinyDashBoard')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
service_data.columns
service_data.columns()
service_data.colnames
service_data.colnames()
colnames(service_data)
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
runApp('C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service')
service_data <- read.csv(file = "./test.csv")
service_data$Created.Date1<-as.Date(service_data$Created.Date,format="%m/%d/%Y")
service_data
colnames(service_data)
setwd("C:/nydsa bootcamp slides/Projects/2/Shinyapp/311service")
service_data <- read.csv(file = "./test.csv")
service_data$Created.Date1<-as.Date(service_data$Created.Date,format="%m/%d/%Y")
service_data
service_data[1:8]
service_data[2:8]
service_data[2:9]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
service_data[3]
service_data[4]
line_df<-service_data[service_data$Borough=="BROOKLYN",]%>%
filter(Created.Date1>='2018-01-01'&Created.Date1<='input$daterange[2]<='2018-01-07')%>%
group_by(Date=Created.Date1,Complaint.Type)%>%
summarize(count=n())
line_df<-service_data[service_data$Borough=="BROOKLYN",]%>%
filter(Created.Date1>='2018-01-01'&Created.Date1<='2018-01-07')%>%
group_by(Date=Created.Date1,Complaint.Type)%>%
summarize(count=n())
line_df
?melt
dcast(lin_df,Date+Complaint.Type~variable, value.var="count")
library(data.table)
dcast(lin_df,Date+Complaint.Type~variable, value.var="count")
dcast(line_df,Date+Complaint.Type~variable, value.var="count")
?dcast
dcast(line_df,Date+Complaint.Type, value.var="count")
dcast(line_df,Date~Complaint.Type, value.var="count")
runApp()
runApp()
line_df
colnames(line_df[-1])
line_df<-dcast(line_df,Date~Complaint.Type, value.var="count")
colnames(line_df[-1])
runApp()
runApp()
runApp()
runApp()
runApp()
